AES-128 encryption ALGORITHM - transmitting

Psuedotext

// things to remember
// plain text is 16 bytes / 128 bits. this will hold the command to start or stop.
// key is also 128 bits. will need to be hard coded into the transmitter and receiver

 


Step 1: Splitting key into roundkeys // key expansion


example of how to differentiate words ina loop
c=0
L=[w0,w1,w2,w3]

w=L[which word + starting point(counter)]
wor1=L[0+c]

wor2=L[1+c]
etc. etc.

words are created and stuff happens, g function returns, etc.

c+=4

[w0^,w1,w2,w3,w4^,w5,w6,w7]


key is created 16 bits
  
each 4 bits in order are split into words (4 words)

the 4 words are the words that make up the first key  (yes, round 0 key is the main key)

4 words are added to List of words L



expansionfunc(L): (runs 10 times)
	if (first run) then define w1-4 from L
	Gwor4= gfunc(wor4)
	Nwor1 = Gwor4 XOR wor1
	Nwor2 = Nwor1 XOR wor2
	Nwor3 = Nwor2 XOR wor3
	Nwor4 = Nwor3 XOR wor4
	
	Nwor1-4 added to L
	
	wor1-4=Nwor1-4



	

gfunc(word): 

	move byte[4] to end of index

	move all other bytes to previous index

	byte[1-4]=sbox(byte[1-4])

	rconbyte=rcon()

	nbyte[1-4]=byte[1-4] XOR rconbyte[1-4]

	return nbyte

sbox(byte):
	
	s box conversion. remember, first 4 bits are row, last 4 bits are column

rcon():
	store all RCONs, keep counter either globally or as an argument/attribute of the function you put in
	give proper rcon when called



Step 2:

Seed / counter / plaintext

//take original plaintext and incremement it by seed
//needs to be 16 bytes

//how will it be incremented? adding one bit at a time to the end might be too easy
//maybe use an exponential function to increment it? or not idk
// fibonnaci numbers - get too big too fast
// diff sequenece, adds by the 10th previous number.
	


*largest number possible is 340282366920938463463374607431768211455

*that can fit into the 6 bytes 186 times with fib sequence, after which needs to be reset to 0

above is now false: Fibonacci - generated seed is now allocated to 13 bytes, with 3 bytes being allocated for 24 hr time.

largest number possible to be held in 13 bytes is 20282409603651670423947251286015

largest achievable number by fib seq. in given # bytes is 16130531424904581415797907386349

meaning we have 151 cycles of the fib sequence.

BUT need to skip 1 in sequence since it repeats (fib(1)=1 and fib(2)=1)
also skipping 0 since 0 is too obvious.
seed starts at 2.

seed=2
plaintextgen():
	if seed>=151:
		seed=2
	plaintext=Fibonacci(seed)+time()
	seed+=1


Step 3: Round Tranformations

encrypt():

	round1text= addRoundKey(plaintext)

	mainround(round1text,10)


mainround(text,rounds):
	
	for rounds:

		sbytes= sbox(text)

		shiftedbytes=shiftRows(sbytes)
	
		mixedbytes=mixColumns(shiftedbytes)
	
		text=AddRoundKey(mixedbytes)
		
	
	finalround(text)
	

finalround(text):

	sbytes= sbox(text)

	shiftedbytes=shiftRows(sbytes)
	
	rkbytes=AddRoundKey(shiftedbytes)
	
	return rkbytes


shiftRows(bytes):

	byte[4] moved to [7]
	bytes 5 6 7 moved back 1
	
	byte [8] switch with byte [10]
	byte [9] switch with byte [11]

	byte [15] moved to [12]
	byte 12 13 14 moved up 1
mixColumns(bytes):

matrix multiplication with predefined matrix
[2 3 1 1,
 1 2 3 1,
 1 1 2 3,
 3 1 1 2]


AddRoundKey(bytes):

XOR dataset with round key




Step 4:

Sending to reciever	

